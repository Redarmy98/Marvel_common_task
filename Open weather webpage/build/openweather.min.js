!function($) {
    $.fn.openWeather = function(options) {
        if (!this.length) return this;

        const $element = $(this);
        const defaults = {
            descriptionTarget: null,
            maxTemperatureTarget: null,
            minTemperatureTarget: null,
            windSpeedTarget: null,
            humidityTarget: null,
            sunriseTarget: null,
            sunsetTarget: null,
            placeTarget: null,
            iconTarget: null,
            customIcons: null,
            units: "c",
            city: null,
            lat: null,
            lng: null,
            key: null,
            lang: "en",
            success: function() {},
            error: function(error) {}
        };

        const settings = $.extend({}, defaults, options);

        let apiUrl = "//api.openweathermap.org/data/2.5/weather?lang=" + settings.lang;
        apiUrl += settings.city ? "&q=" + settings.city : (settings.lat && settings.lng) ? "&lat=" + settings.lat + "&lon=" + settings.lng : "";
        apiUrl += settings.key ? "&appid=" + settings.key : "";

        $.ajax({
            type: "GET",
            url: apiUrl,
            dataType: "jsonp",
            success: function(data) {
                if (data) {
                    const temperatureUnit = settings.units === "f" ? "Â°F" : "Â°C";
                    const currentTemp = Math.round(settings.units === "f" ? 1.8 * (data.main.temp - 273.15) + 32 : data.main.temp - 273.15) + temperatureUnit;
                    const minTemp = Math.round(settings.units === "f" ? 1.8 * (data.main.temp_min - 273.15) + 32 : data.main.temp_min - 273.15) + temperatureUnit;
                    const maxTemp = Math.round(settings.units === "f" ? 1.8 * (data.main.temp_max - 273.15) + 32 : data.main.temp_max - 273.15) + temperatureUnit;

                    const result = {
                        city: `${data.name}, ${data.sys.country}`,
                        temperature: {
                            current: currentTemp,
                            min: minTemp,
                            max: maxTemp,
                            units: settings.units.toUpperCase()
                        },
                        description: data.weather[0].description,
                        windSpeed: `${Math.round(data.wind.speed)} Mps`,
                        humidity: `${data.main.humidity}%`,
                        sunrise: `${formatTime(data.sys.sunrise)} AM`,
                        sunset: `${formatTime(data.sys.sunset)} PM`
                    };

                    $element.html(currentTemp);
                    if (settings.minTemperatureTarget) $(settings.minTemperatureTarget).text(minTemp);
                    if (settings.maxTemperatureTarget) $(settings.maxTemperatureTarget).text(maxTemp);
                    if (settings.descriptionTarget) $(settings.descriptionTarget).text(result.description);
                    if (settings.iconTarget && data.weather[0].icon) {
                        const iconUrl = settings.customIcons ? `${settings.customIcons}${getIconType(data.weather[0].icon)}.png` : `http://openweathermap.org/img/w/${data.weather[0].icon}.png`;
                        $(settings.iconTarget).attr("src", iconUrl);
                    }
                    if (settings.placeTarget) $(settings.placeTarget).text(result.city);
                    if (settings.windSpeedTarget) $(settings.windSpeedTarget).text(result.windSpeed);
                    if (settings.humidityTarget) $(settings.humidityTarget).text(result.humidity);
                    if (settings.sunriseTarget) $(settings.sunriseTarget).text(result.sunrise);
                    if (settings.sunsetTarget) $(settings.sunsetTarget).text(result.sunset);

                    settings.success.call(this, result);
                }
            },
            error: function(_, textStatus, errorThrown) {
                settings.error.call(this, { error: textStatus });
            }
        });

        function formatTime(timestamp) {
            const date = new Date(timestamp * 1000);
            let hours = date.getHours();
            let minutes = date.getMinutes();
            hours = hours > 12 ? 12 - (24 - hours) : hours;
            minutes = (minutes < 10 ? '0' : '') + minutes;
            return hours + ":" + minutes;
        }

        function getIconType(icon) {
            // Your icon mapping logic goes here
            // For simplicity, returning the original icon type for now
            return icon;
        }
    };
}(jQuery);

/*!
Name: Open Weather
Dependencies: jQuery, OpenWeatherMap API
Author: Michael Lynch
Author URL: http://michaelynch.com
Date Created: August 28, 2013
Licensed under the MIT license
*/